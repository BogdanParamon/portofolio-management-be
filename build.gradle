plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.5'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'checkstyle'
    id 'jacoco'
}

group = 'com.team2a'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-web:2.7.9'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'javax.servlet:javax.servlet-api:4.0.1'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'
	//implementation "org.hibernate:hibernate-core:5.4.2.Final"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'com.h2database:h2'
}

tasks.named('test') {
	useJUnitPlatform()
}


sourceSets {
	integrationTest {
		java.srcDir file('src/integrationTest/java')
		resources.srcDir file('src/integrationTest/resources')
		compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
		runtimeClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
	}
}

configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
	description = 'Runs the integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory.set(layout.buildDirectory.dir("reports/jacoco"))
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.required.set(true)
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['**/ProjectPortfolioManagementSystemApplication.class',
							  '**/Routes.class',
							  '**/MediaHelper.class',
							  '**/security/SecurityConfig.class',
							  '**/security/Permissions.class',
							  '**/WebSocket'
					])
		})
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.95
			}
		}
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['**/ProjectPortfolioManagementSystemApplication.class',
							  '**/Routes.class',
							  '**/MediaHelper.class',
							  '**/security/SecurityConfig.class',
							  '**/security/Permissions.class',
							  '**/WebSocket'
					])
		})
	}
}


def isCI = System.getenv().containsKey("CI")

checkstyle {
	showViolations = true
	ignoreFailures = !isCI
	maxWarnings = 0
	toolVersion = '8.45.1'
	configFile = file('checkstyle.xml')
}

check.dependsOn(checkstyleMain, checkstyleTest)

test.finalizedBy(jacocoTestReport)